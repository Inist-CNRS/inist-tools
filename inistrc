################################################################################
#
#   # #   # #  ###  #####     #####  ###   ###  #     ###
#   # ##  # # #       #         #   #   # #   # #    #
#   # # # # #  ###    #   ###   #   #   # #   # #     ### 
#   # #  ## #     #   #         #   #   # #   # #        #
#   # #   # #  ###    #         #    ###   ###  ##### ###
#
# Fichier à sourcer dans l'environnement de travail pour avoir accès aux
# outils « inist-tools ».
#
# @author : INIST-CNRS/DPI
#
################################################################################

#-------------------------------------------------------------------------------
# Environnement
#-------------------------------------------------------------------------------
export PATH="$PATH:/opt/inist-tools"
PID="$$"
PARENT_COMMAND="$(ps -o comm= $PPID)"
MODULE_NAME="INIST-TOOLS"
DIR_MODULE="/opt/inist-tools" # fixé "en dur" en fonction du chemin définitif
DIR_CONF="$DIR_MODULE/conf"
DIR_LIBS="$DIR_MODULE/libs"
DIR_TOOLS="$DIR_MODULE/tools"
DIR_INSTALL="$DIR_MODULE/install"
DIR_ENV="$DIR_MODULE/env"

SUDO="$(which sudo) -u root"
NET_IP=""

# Version en fonction du mode DEV ou DEB
# CURDIR=$(cd "$(dirname "$PWD")" && pwd)
# CURDIR=$(dirname "$(readlink -f "$0")")
# DIR_IT=$(readlink -f "$CURDIR")
DIR_IT=$(readlink -f "$DIR_MODULE")
if [ -d "$DIR_IT/.git" ]; then
  MODULE_VERSION=$(cd "$DIR_IT" && git describe --tags)
  MODULE_VERSION_SHORT=$(cd "$DIR_IT" && git describe --tags | cut -d"-" -f1)
elif [ -d "$DIR_MODULE/.git" ]; then
  MODULE_VERSION=$(cd "$DIR_MODULE" && git describe --tags)
  MODULE_VERSION_SHORT=$(cd "$DIR_MODULE" && git describe --tags | cut -d"-" -f1)
elif [ -f "$DIR_MODULE/.version" ]; then
  MODULE_VERSION=$(cat "$DIR_MODULE/.version")
  MODULE_VERSION_SHORT="$MODULE_VERSION"
else
  MODULE_VERSION="inconnue"
  MODULE_VERSION_SHORT="inconnue"
fi

#-----------------------------------------------------------------------------
# Chargement libs + conf
#-----------------------------------------------------------------------------
if [ -f "$DIR_LIBS/std.rc" ]; then
  # source "$DIR_LIBS/ansicolors.lib.sh"
  source "$DIR_LIBS/ansicolors.rc"
  source "$DIR_LIBS/std.rc"
  source "$DIR_LIBS/autocomplete.rc"
else
  logger -s "[$MODULE_NAME] [ERROR] Impossible de charger la librairie de $MODULE_NAME depuis « $DIR_LIBS ». Fin."
  return 1
fi

if [ -f "$DIR_CONF/inist.conf.sh" ]; then
  source "$DIR_CONF/inist.conf.sh"
else
  logger -s "[$MODULE_NAME] [ERROR] Impossible de charger la configuration de $MODULE_NAME depuis « $DIR_LIBS ». Fin."
  return 1
fi

#-------------------------------------------------------------------------------
# Check sur le répertoire /env de l'appli
#-------------------------------------------------------------------------------
# 

#-------------------------------------------------------------------------------
# COMMANDE [+option[s]]
#-------------------------------------------------------------------------------

function inist {

  #-----------------------------------------------------------------------------
  # Vérification des dépendances
  #-----------------------------------------------------------------------------
  checkFind=$(_it_std_check_command "find")
  if [ "$checkFind" == "$FALSE" ]; then
    _it_std_message "ERROR" "« find » non trouvé, veuillez l'installer avant de continuer."
    exit $FALSE
  fi

  #-----------------------------------------------------------------------------
  # Gestion des arguments 
  #-----------------------------------------------------------------------------

  # Aucun argument : affichage de l'aide
  if [ "$#" -lt 1 ]; then
    _it_std_consoleMessage "WARNING" "Nombre d'argument incorrect !"
    _it_std_show_help
    return $FALSE
  fi
  
  # ligne commande = arguments de la fonction
  case $1 in

    #---------------------------------------------------------------------------
    # Commande de paramétrage du proxy INIST
    #---------------------------------------------------------------------------
    apt )
      source "$DIR_LIBS/misc.rc"
      _it_misc_apt_proxy "$2"
    ;;
    
    bower )
      source "$DIR_LIBS/bower.rc"
      _it_bower_proxy "$2"
    ;;

    browsers )
      # _it_std_consoleMessage "WARNING" "Cette commande n'est pas encore implémentée."
      source "$DIR_LIBS/browsers.rc"
      _it_browsers_proxy "$2"
    ;;
    
    chrome )
      _it_std_consoleMessage "WARNING" "Cette commande n'est pas encore implémentée."
      # source "$DIR_LIBS/browsers.rc"
      # _it_browsers_chrome_proxy "$2"
    ;;
    
    chromium )
      # _it_std_consoleMessage "WARNING" "Cette commande n'est pas encore implémentée."
      source "$DIR_LIBS/browsers.rc"
      _it_browsers_chromium_proxy "$2"
    ;;

    curl )
      # _it_std_consoleMessage "WARNING" "Cette commande n'est pas encore implémentée."
      source "$DIR_LIBS/misc.rc"
      _it_misc_curl_proxy "$2"
    ;;
    
    docker )
      source "$DIR_LIBS/docker.rc"
      case "$2" in
        inst|install)
          _it_docker_install
        ;;
        *)
          _it_docker_proxy "$2"
        ;;
      esac
      
    ;;

    env )
      source "$DIR_LIBS/inist-proxy.rc"
      _it_inistProxy "$2"
    ;;
    
    firefox )
      _it_std_consoleMessage "WARNING" "Cette commande n'est pas encore implémentée."
      # source "$DIR_LIBS/browsers.rc"
      # _it_browsers_firefox_proxy "$2"
    ;;
    
    github )
      # _it_std_consoleMessage "WARNING" "Cette commande n'est pas encore implémentée."
      source "$DIR_LIBS/github.rc"
      _it_github_protocol "$2"
    ;;
    
    gnome )
      source "$DIR_LIBS/desktop.rc"
      _it_desktop_gnome_proxy "$2"
    ;;
    
    iceweasel )
      _it_std_consoleMessage "WARNING" "Cette commande n'est pas encore implémentée."
      # source "$DIR_LIBS/browsers.rc"
      # _it_browsers_iceweasel_proxy "$2"
    ;;
    
    kde )
      source "$DIR_LIBS/desktop.rc"
      _it_desktop_kde_proxy "$2"
    ;;
    
    npm )
      source "$DIR_LIBS/misc.rc"
      _it_misc_npm_proxy "$2"
    ;;
    
    postfix )
      source "$DIR_LIBS/mail.rc"
      _it_mail_postfix "$2"
    ;;

    shell )
      source "$DIR_LIBS/misc.rc"
      _it_inistProxy "$2"
    ;;

    system )
      source "$DIR_LIBS/misc.rc"
      _it_inistProxy "$2"
    ;;

    
    unity )
      source "$DIR_LIBS/desktop.rc"
      _it_desktop_unity_proxy "$2"
    ;;
    
    wget )
      source "$DIR_LIBS/misc.rc"
      _it_misc_wget_proxy "$2"
    ;;
    
    xfce )
      source "$DIR_LIBS/desktop.rc"
      _it_desktop_xfce4_proxy "$2"
    ;;
    
    
    #---------------------------------------------------------------------------
    # COMMANDE : info
    #---------------------------------------------------------------------------
    -i | --info )
      # On charge la lib "network"
      source "$DIR_LIBS/network.rc"
      _it_network_info
      return $TRUE
    ;;

    #---------------------------------------------------------------------------
    # stuff : ranger automatiquement les trucs qui traînent avec un simple
    #         drag-&-drop sur une icône du bureau qui sert de raccourci à
    #         la commande « inist stuff »
    #---------------------------------------------------------------------------
    stuff )
      _it_std_consoleMessage "WARNING" "Cette commande n'est pas encore implémentée."
      # source "$DIR_LIBS/stuff.rc"
      # _it_std_message "INFO" "STUFF : rangement..."
      # _it_stuff_tidy "$@"
    ;;

    #---------------------------------------------------------------------------
    # Meta-commandes ON/OFF
    #---------------------------------------------------------------------------
    onOLD)
      cat /opt/inist-tools/conf/servicesOn | parallel --gnu --no-notice /opt/inist-tools/inistexec {} on
    ;;

    offOLD)
      cat /opt/inist-tools/conf/servicesOff | parallel --gnu --no-notice /opt/inist-tools/inistexec {} off
    ;;
    
    on )
      _it_std_consoleMessage "TITLE" "Basculement de toutes les applications pour utiliser le proxy INIST..."
      inist shell on
      inist apt on
      inist docker on
      inist github on
      inist npm on
      inist bower on
      inist curl on
      inist wget on
    ;;
    
    off )
      _it_std_consoleMessage "TITLE" "Désactivation du proxy INIST pour toutes les applications..."
      inist shell off
      inist apt off
      inist docker off
      inist github off
      inist npm off
      inist bower off
      inist curl off
      inist wget off
    ;;

    #---------------------------------------------------------------------------
    # time|date|sync
    #---------------------------------------------------------------------------
    ntp )
      case $2 in
      
        # Synchro avec serveur ntp de l'INIST
        sync )
          _it_std_consoleMessage "INFO" "Synchronisation de la date/heure..."
          $SUDO "/opt/inist-tools/tools/timesync.sh"
          _it_std_consoleMessage "OK" "Heure synchronisée"
          return $TRUE
        ;;
        
        * )
          _it_std_consoleMessage "AIDE" "« inist ntp sync » pour synchroniser votre machine avec le serveur NTP de l'INIST"
        ;;
        
      esac
    ;;

    #---------------------------------------------------------------------------
    # daemon
    #---------------------------------------------------------------------------
    -d | --daemon )
      # source "/opt/inist-tools/libs/daemon.rc"
      # ToDo...
    ;;

    #---------------------------------------------------------------------------
    # power
    #---------------------------------------------------------------------------
    power )
      case "$2" in
        
        save )
          $SUDO "/opt/inist-tools/tools/powersave.sh"
          return $TRUE
        ;;

        auto )
          $SUDO "/opt/inist-tools/tools/powerondemand.sh"
          return $TRUE
        ;;
        
        max )
          $SUDO "/opt/inist-tools/tools/powermax.sh"
          return $TRUE
        ;;
        
        *)
          _it_std_consoleMessage "WARNING" "L'option « $3 » n'est pas reconnue pour la commande « power »"
          return $FALSE
        ;;
        
      esac
    ;;
    
    powersave )
      /opt/inist-tools/tools/powersave.sh
      return $TRUE
    ;;
    
    powermax )
      /opt/inist-tools/tools/powermax.sh
      return $TRUE
    ;;
    
    #---------------------------------------------------------------------------
    # reload
    #---------------------------------------------------------------------------
    -r | --reload )
      _it_std_consoleMessage "INFO" "Rechargement de INIST-TOOLS"
      source /opt/inist-tools/inistrc
      _it_std_consoleMessage "INFO" "INIST-TOOLS [$MODULE_VERSION] rechargé"
      return $TRUE
    ;;
    
    #---------------------------------------------------------------------------
    # status
    #---------------------------------------------------------------------------
    -s | --status | st | status )
      _it_std_consoleMessage "TITLE" "Informations sur l'environnement..."
      inist shell status
      inist apt status
      inist docker status
      inist github status
      inist npm status
      inist bower status
      inist curl status
      inist wget status
      # source /opt/inist-tools/libs/misc.rc
      # _it_misc_proxyStatus
      # return $TRUE
    ;;

    #---------------------------------------------------------------------------
    # AIDE -- OPTION : -h | --help
    #---------------------------------------------------------------------------
    -h | --help )
      _it_std_show_help
      return $TRUE
    ;;
    
    #---------------------------------------------------------------------------
    # OPTION : --pid
    #---------------------------------------------------------------------------
    --pid )
      echo "$PID"
      return $TRUE
    ;;

    #---------------------------------------------------------------------------
    # OPTION : --version
    #---------------------------------------------------------------------------
    -v | --version )
      cat "$DIR_LIBS/gfx/cnrs.ansi"
      _it_std_show_version
      return $TRUE
    ;;

    #---------------------------------------------------------------------------
    # Options non gérées...
    #---------------------------------------------------------------------------
    * )
      _it_std_consoleMessage "WARNING" "Commande ou option « $1 » inconnue (ou peut-être mal saisie)."
    ;;
    
  esac
}

#-------------------------------------------------------------------------------
# Si la variable d'env it_env_isProxy est positionnée, on répercute son état
#-------------------------------------------------------------------------------
isSystemProxy=$(_it_std_getEnv "shell")
if [ "$isSystemProxy" == $TRUE ]; then
  source "$DIR_LIBS/inist-proxy.rc"
  _it_inistProxy "defaultOn"
elif [ "$isSystemProxy" == $FALSE ]; then
  source "$DIR_LIBS/inist-proxy.rc"
  _it_inistProxy "defaultOff"
else
  # "on" par défaut...
  source "$DIR_LIBS/inist-proxy.rc"
  _it_inistProxy "defaultOn"
  # _it_std_consoleMessage "WARNING" "Variable d'environnement vide ou contenant une valeur incohérente ($isSystemProxy)."
fi

#-------------------------------------------------------------------------------
# FIN !
# /!\ NE PAS METTRE D'EXIT #
#-------------------------------------------------------------------------------
