#!/usr/bin/env bash
################################################################################
#
# inist-tools / libs / std.rc
# 
# Bibliothèque de fonctions standards utilisées par le lanceur ou les
# outils « inist-tools ».
#
# @author : INIST-CNRS/DPI
#
################################################################################

#-----------------------------------------------------------------------
# Initialisation de variables globales
#-----------------------------------------------------------------------

# PROXY
INIST_HTTP_PROXY="http://proxyout.inist.fr:8080"
INIST_HTTPS_PROXY="https://proxyout.inist.fr:8080"
INIST_FTP_PROXY="http://proxyout.inist.fr:8080"
INIST_PROXYPAC="http://proxypac.intra.inist.fr/proxy.pac"
INIST_NO_PROXY="localhost,127.0.0.0/8,*.local,172.16.0.0/16"
INIST_PROXY_ADDRESS="http://proxyout.inist.fr"
INIST_PROXY_PORT="8080"

# ICONS
ICON_CNRS="$DIR_LIBS/gfx/cnrs_64px.png"
ICON_CHROME="$DIR_LIBS/gfx/chrome_64px.png"
ICON_CHROMIUM="$DIR_LIBS/gfx/chromium_64px.png"
ICON_FIREFOX="$DIR_LIBS/gfx/firefox_64px.png"
ICON_ICEWEASEL="$DIR_LIBS/gfx/iceweasel_64px.png"


#-----------------------------------------------------------------------
# Logging
# $1 : level/priorité (NOTICE, WARNING, ERROR, etc.)
# $2 : contenu du message ou de l'erreur
#-----------------------------------------------------------------------
function _it_std_message {
  local MESSAGE="[INIST-TOOLS ($MODULE_VERSION_SHORT)] $2"
  local MSG_TITLE="[INIST-TOOLS : $1]"
  local MSG_CONTENT="$2"
  
  case "$1" in
  
    # INFORMATION
    info|INFO)
      logger -s -p "$1" "$MESSAGE"
      notify-send --icon="$ICON_CNRS" --urgency=low "INFORMATION" "$MESSAGE"
    ;;
    
    # ALERTE !
    warning|WARNING)
      logger -s -p "$1" "$MESSAGE"
      notify-send --icon=stock_dialog-warning --urgency=normal "ATTENTION !" "$MESSAGE"
    ;;
    
    # ERREUR !
    error|ERROR)
      logger -s -p "$1" "$MESSAGE"
      notify-send --icon=stock_dialog-error --urgency=critical "ERREUR !" "$MESSAGE"
    ;;
    
    # FIREFOX
    firefox|FIREFOX)
      logger -s "$MESSAGE"
      notify-send --icon="$ICON_FIREFOX" --urgency=low "MSG_TITLE" "$MSG_CONTENT"
    ;;

    # ICEWEASEL
    iceweasel|ICEWEASEL)
      logger -s "$MESSAGE"
      notify-send --icon="$ICON_ICEWEASEL" --urgency=low "MSG_TITLE" "$MSG_CONTENT"
    ;;

    # CHROME
    chrome|CHROME)
      logger -s "$MESSAGE"
      notify-send --icon="$ICON_CHROME" --urgency=low "MSG_TITLE" "$MSG_CONTENT"
    ;;

    # CHROMIUM
    chromium|CHROMIUM)
      logger -s "$MESSAGE"
      notify-send --icon="$ICON_CHROMIUM" --urgency=low "MSG_TITLE" "$MSG_CONTENT"
    ;;
    
    # Autre cas
    *)
      logger -s "$MESSAGE"
      notify-send --icon="$ICON_CNRS" --urgency=low "MSG_TITLE" "$MSG_CONTENT"
    ;;
    
  esac
}

#-----------------------------------------------------------------------
# Message d'accueil (générique, réutilisable)
#-----------------------------------------------------------------------
function _it_std_greeting {
  # printf "${FG_BR_BLUE}$MODULE_NAME [${FG_BR_WHITE}$MODULE_VERSION]${RESET_ALL}\n"
  if echo -e "$MODULE_NAME [$MODULE_VERSION_SHORT]\n" ; then
    return 0
  fi
}

#-----------------------------------------------------------------------
# Affichage de la version
#-----------------------------------------------------------------------
function _it_std_show_version {
  echo -e "$MODULE_NAME est en version ${FG_BR_BLUE}${BG_BLUE}${FS_BOLD}$MODULE_VERSION${RESET_ALL}\nSystème : $HOST_SYSTEM\nVersion : $HOST_SYSTEM_VERSION\n"
}

#-----------------------------------------------------------------------
# Affichage de l'aide
#-----------------------------------------------------------------------
function _it_std_show_help {
  cat $DIR_LIBS/inist-tools-help.txt
}

#-----------------------------------------------------------------------
# Vérification de l'existance d'un binaire
# (retourne 0 si trouvé, 1 si non trouvé)
#-----------------------------------------------------------------------
function _it_std_check_command {
  if [ ! -z "$1" ]; then
    CHECK=$(which "$1")
    return $?
  fi
  # Argument $1 vide => ERREUR
  return 1
}

#-----------------------------------------------------------------------
# Vérification du dockage du portable...
# ...en comptant les hub USB dispo
# ...en comptant les écrans connectés
# /!\ Pss fiable à 100% (et il faut que xrandr soit installé)
#-----------------------------------------------------------------------
#function _it_std_check_docked {
  #USBHUBS_COUNT=$(lsusb | grep "hub" | wc -l)
  #DISPLAY_COUNT=$(xrandr | grep " connected" | wc -l)
  #if [ $USBHUBS_COUNT -eq 4 ] && [ $DISPLAY_COUNT -gt 1 ]; then
    #IS_DOCKED=0
    #return 0
  #else
    #IS_DOCKED=1
    #return 1
  #fi
#}
