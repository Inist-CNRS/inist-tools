#!/usr/bin/env bash
################################################################################
#
# inist-tools / libs / std.rc
# 
# Bibliothèque de fonctions standards utilisées par le lanceur ou les
# outils « inist-tools ».
#
# @author : INIST-CNRS/DPI
#
################################################################################

#-------------------------------------------------------------------------------
# Initialisation de variables globales
#-------------------------------------------------------------------------------

DIR_MODULE="/opt/inist-tools" # fixé "en dur" en fonction du chemin définitif
DIR_CONF="$DIR_MODULE/conf"
DIR_LIBS="$DIR_MODULE/libs"
DIR_TOOLS="$DIR_MODULE/tools"
DIR_INSTALL="$DIR_MODULE/install"
DIR_ENV="$DIR_MODULE/env"

# TRUE or FALSE ?
TRUE=0
FALSE=1
PROXY_INIST=0
PROXY_ADSL=2

# PROXY
INIST_HTTP_PROXY="http://proxyout.inist.fr:8080"
INIST_HTTPS_PROXY="http://proxyout.inist.fr:8080"
INIST_FTP_PROXY="http://proxyout.inist.fr:8080"
INIST_PROXYPAC="http://proxypac.intra.inist.fr/proxy.pac"
INIST_NO_PROXY="localhost,127.0.0.0/8,172.16.0.0/16,0.0.0.0,*.inist.fr,*.local"
INIST_PROXY_ADDRESS="http://proxyout.inist.fr"
INIST_PROXY_PORT="8080"

# PROXY ADSL
INIST_HTTP_ADSL_PROXY="http://adsl.inist.fr:8080"
INIST_HTTPS_ADSL_PROXY="https://adsl.inist.fr:8080"
INIST_FTP_ADSL_PROXY="http://adsl.inist.fr:8080"
INIST_ADSL_PROXYPAC="http://proxypac.intra.inist.fr/proxy.pac"
INIST_ADSL_PROXY_ADDRESS="http://adsl.inist.fr"
INIST_ADSL_PROXY_PORT="8080"


# ICONS
ICON_CNRS="$DIR_LIBS/gfx/cnrs_64px.png"
ICON_CHROME="$DIR_LIBS/gfx/chrome_64px.png"
ICON_CHROMIUM="$DIR_LIBS/gfx/chromium_64px.png"
ICON_FIREFOX="$DIR_LIBS/gfx/firefox_64px.png"
ICON_ICEWEASEL="$DIR_LIBS/gfx/iceweasel_64px.png"

# RÉSEAU
HOST_IP_ADDRESS=$(hostname -I | cut -d " " -f1)

# User / Group / Sudo
SUDO="$(which sudo) -u root"

# Dépendances logicielles
IT_DEPENDENCIES="make ntpdate parallel jq sudo libnotify-bin"

#-------------------------------------------------------------------------------
# Détermination de la plateforme et de sa version et la version du noyau
#-------------------------------------------------------------------------------

# --- Distribution
is_debian=$(cat /etc/issue | grep -i "debian")
is_ubuntu=$(cat /etc/issue | grep -i "ubuntu")

if [ "$is_debian" ]; then
  HOST_SYSTEM="debian"
elif [ "$is_ubuntu" ]; then
  HOST_SYSTEM="ubuntu"
else
  HOST_SYSTEM="autre"
fi

# --- Version de la distribution
if [ $HOST_SYSTEM == 'ubuntu' ]; then
  osReleaseVersion=$(cat /etc/os-release | grep "VERSION=")
  # un joli bashisme pour la forme (merci askUbuntu)
  HOST_SYSTEM_CODENAME=$(echo ${osReleaseVersion/*, /} | cut -d '"' -f 1)
  HOST_SYSTEM_VERSION_RAW=$(cat /etc/lsb-release | grep -i "DISTRIB_RELEASE" | cut -d "=" -f 2)
  HOST_SYSTEM_VERSION_MAJOR=$(echo "$HOST_SYSTEM_VERSION_RAW" | cut -d"." -f 1)
  HOST_SYSTEM_VERSION_MINOR=$(echo "$HOST_SYSTEM_VERSION_RAW" | cut -d"." -f 2)
  HOST_SYSTEM_VERSION="$HOST_SYSTEM_VERSION_MAJOR.$HOST_SYSTEM_VERSION_MINOR"
  if [ $HOST_SYSTEM_VERSION == "16.04" ]; then
      HOST_SYSTEM_CODENAME=$(echo ${osReleaseVersion/*, /} | cut -d '"' -f 2)
  fi
elif [ $HOST_SYSTEM == 'debian' ]; then
  debianCodename=$(lsb_release -a 2>/dev/null | grep -i "codename" | tr -d "\t" | cut -d ":" -f2)
  HOST_SYSTEM_CODENAME=$(echo "$debianCodename" | tr '[A-Z]' '[a-z]')
  HOST_SYSTEM_VERSION=$(cat /etc/debian_version)
  HOST_SYSTEM_VERSION_MAJOR=$(echo "$HOST_SYSTEM_VERSION" | cut -d"." -f 1)
  HOST_SYSTEM_VERSION_MINOR=$(echo "$HOST_SYSTEM_VERSION" | cut -d"." -f 2)
fi
  
# --- Version du noyau
HOST_KERNEL_MAJOR=$(uname -r | cut -d'.' -f1)
HOST_KERNEL_MINOR=$(uname -r | cut -d'.' -f2)
HOST_KERNEL="$HOST_KERNEL_MAJOR.$HOST_KERNEL_MINOR"

#-------------------------------------------------------------------------------
# Variables d'« environnement » utilisant /opt/inist-tools/conf
#-------------------------------------------------------------------------------
#
function _it_std_setEnv {
  envName="$1"
  envVal="$2"
  if [ ! -z "$envName" ] && [ ! -z "$envVal" ]; then
    echo "$envVal" > "$DIR_ENV/.it_env_${envName}"
    # chmod 777 "$DIR_ENV/.it_env_${envName}"
  fi
  return $FALSE
}

function _it_std_getEnv {
  envName="$1"
  if [ -z "$envName" ]; then
    return $FALSE
  else
    envFile="$DIR_ENV/.it_env_${envName}"
    if [ -e "$envFile" ]; then 
      cat "$envFile"
    else
      echo "-1"
    fi
  fi
}

function _it_std_checkAction {
  local app="$1"
  local action="$2"
  local message
  
  # if [ $app == "proxyForAll" ]; then
  #   
  # fi
  
  if [ -z "$app" ] || [ -z "$action" ]; then
    return $FALSE
  fi
  
  case "$action" in
  
    $TRUE)
      message="pour utiliser le proxy INIST"
    ;;
    
    $FALSE)
      message="pour ne pas utiliser le proxy INIST"
    ;;
    
    *)
      message=""
    ;;
  
  esac
  
  envValue=$(_it_std_getEnv "$app")
  
  if [ "$envValue" == "$action" ]; then
    _it_std_consoleMessage "WARNING" "« $app » est déjà configuré $message"
    return $FALSE
  elif [ -z "$envValue" ]; then
    _it_std_consoleMessage "WARNING" "Il n'y a pas d'informations concernant la configuration de « $app »."
  else
    return $TRUE
  fi
}

function _it_std_setAction {
  local app="$1"
  local action="$2"

  if [ -z "$app" ] || [ -z "$action" ]; then
    return $FALSE
  fi
  
  case "$action" in
  
    $TRUE)
      # Environnement
      _it_std_setEnv "$app" $TRUE
      # Message
      _it_std_consoleMessage "INFO" "« $app » est configuré pour fonctionner à l'INIST"
    ;;
  
    $FALSE)
      # Environnement
      _it_std_setEnv "$app" $FALSE
      # Message
      _it_std_consoleMessage "INFO" "« $app » n'est plus configuré pour fonctionner à l'INIST"
    ;;
  
    *)
      _it_std_consoleMessage "WARNING" "la commande « $action » est inconnue dans ce contexte..."
      return $FALSE
    ;;
  
  esac
  
  
}

function _it_std_getStatus {
  local app="$1"
  local envValue=$(_it_std_getEnv "$app")
  
  case $envValue in
  
    $TRUE)
      printf "${FG_BR_GREEN}%-7s${RESET_ALL} %-10s %-7s ${FG_BR_GREEN}%-1s${RESET_ALL}\n" "[INFO]" "$app" "→ on" "✔"
      return $TRUE
    ;;
  
    $FALSE)
      printf "${FG_BR_GREEN}%-7s${RESET_ALL} %-10s %-7s ${FG_BR_RED}%-1s${RESET_ALL}\n" "[INFO]" "$app" "→ off" "✘"
      return $TRUE
    ;;
  
    *)
      _it_std_consoleMessage "INFO" "Il n'y a pas d'information concernant la configuration du proxy INIST pour « $app »"
      return $TRUE
    ;;
  
  esac
}

#-------------------------------------------------------------------------------
# Logging
# $1 : level/priorité (NOTICE, WARNING, ERROR, etc.)
# $2 : contenu du message ou de l'erreur
#-------------------------------------------------------------------------------
function _it_std_message {
  local MESSAGE="[INIST-TOOLS ($MODULE_VERSION)] $2"
  local MSG_TITLE="[INIST-TOOLS : $1]"
  local MSG_CONTENT="$2"
  local expire="1500"
  local USER_LOGIN=$(_it_std_getEnv "USER_LOGIN")
  
  case "$1" in
  
    # INFORMATION
    info|INFO)
      # logger -s -p "$1" "$MESSAGE"
      notify-send --expire-time="$expire" --icon="$ICON_CNRS" --urgency=low "INFORMATION" "$MSG_CONTENT"
    ;;
    
    # ALERTE !
    warning|WARNING)
      # logger -s -p "$1" "$MESSAGE"
      notify-send --icon=stock_dialog-warning --urgency=normal "ATTENTION !" "$MSG_CONTENT"
    ;;
    
    # ERREUR !
    error|ERROR)
      # logger -s -p "$1" "$MESSAGE"
      notify-send --icon=stock_dialog-error --urgency=critical "ERREUR !" "$MSG_CONTENT"
    ;;
    
    # FIREFOX
    firefox|FIREFOX)
      # logger -s "$MESSAGE"
      notify-send --icon="$ICON_FIREFOX" --urgency=low "$MSG_TITLE" "$MSG_CONTENT"
    ;;

    # ICEWEASEL
    iceweasel|ICEWEASEL)
      # logger -s "$MESSAGE"
      notify-send --icon="$ICON_ICEWEASEL" --urgency=low "$MSG_TITLE" "$MSG_CONTENT"
    ;;

    # CHROME
    chrome|CHROME)
      # logger -s "$MESSAGE"
      notify-send --icon="$ICON_CHROME" --urgency=low "$MSG_TITLE" "$MSG_CONTENT"
    ;;

    # CHROMIUM
    chromium|CHROMIUM)
      # logger -s "$MESSAGE"
      notify-send --icon="$ICON_CHROMIUM" --urgency=low "$MSG_TITLE" "$MSG_CONTENT"
    ;;
 
    # Autre cas
    *)
      # logger -s "$MESSAGE"
      notify-send --icon="$ICON_CNRS" --urgency=low "$MSG_TITLE" "$MSG_CONTENT"
    ;;
    
  esac
}

#-------------------------------------------------------------------------------
# Message en console uniquement
# (mais en plus joli)
# $1 : type de message
# $2 : contenu du message
#-------------------------------------------------------------------------------
function  _it_std_consoleMessage {
  case "$1" in

    # Information
    info|INFO)
      printf "${FG_BR_GREEN}[INFO]\t\t${FG_WHITE}$2${RESET_ALL}\n"
    ;;

    # Warning
    attention|ATTENTION|warning|WARNING)
      printf "${FG_BR_YELLOW}[WARNING]\t${FG_WHITE}$2${RESET_ALL}\n"
    ;;

    # Erreur
    erreur|ERREUR|error|ERROR)
      printf "${FG_BR_RED}[ERREUR]\t${FG_WHITE}$2${RESET_ALL}\n"
    ;;

    # Aide
    aide|AIDE|help|HELP)
      printf "${FG_BLUE}[AIDE]\t\t${FG_WHITE}$2${RESET_ALL}\n"
    ;;

    # Action (sert à indiquer une action en cours qui se terminera par un OK
    # ou un NOK)
    action|ACTION)
      printf "${FG_BR_BLUE}[EN COURS]\t${FG_WHITE}$2${RESET_ALL}"
    ;;
    
    # Check/OK
    check|CHECK|ok|OK)
      printf "${FG_BR_GREEN} ✔ ${FG_WHITE}$2${RESET_ALL}\n"
    ;;

    # NoCheck/NOK
    nocheck|NOCHECK|nok|NOK)
      printf "${FG_BR_RED} ✘ ${FG_WHITE}$2${RESET_ALL}\n"
    ;;

    # TITLE
    title|TITLE)
      printf "${FG_GREEN}${FS_BOLD}$2${RESET_ALL}\n"
    ;;
    
    # Tout le reste...
    *)
      printf "\n"
    ;;

  esac
}

#-------------------------------------------------------------------------------
# Message d'accueil (générique, réutilisable)
#-------------------------------------------------------------------------------
function _it_std_greeting {
  # printf "${FG_BR_BLUE}$MODULE_NAME [${FG_BR_WHITE}$MODULE_VERSION]${RESET_ALL}\n"
  if echo -e "$MODULE_NAME [$MODULE_VERSION_SHORT]\n" ; then
    return 0
  fi
}

#-------------------------------------------------------------------------------
# Affichage de la version
#-------------------------------------------------------------------------------
function _it_std_show_version {
  echo -e "$MODULE_NAME est en version ${FG_BR_BLUE}${BG_BLUE}${FS_BOLD}$MODULE_VERSION${RESET_ALL}\nSystème : $HOST_SYSTEM\nVersion : $HOST_SYSTEM_VERSION ($HOST_SYSTEM_CODENAME)\nNoyau   : $HOST_KERNEL\n"
}

#-------------------------------------------------------------------------------
# Affichage de l'aide
#-------------------------------------------------------------------------------
function _it_std_show_help {
  cat $DIR_LIBS/inist-tools-help.txt
}

#-------------------------------------------------------------------------------
# Vérification de l'existance d'un binaire
# (retourne 0 si trouvé, 1 si non trouvé)
#-------------------------------------------------------------------------------
function _it_std_check_command {
  # Argument $1 vide => ERREUR
  if [ ! -z "$1" ]; then
    if [ ! -z $(which "$1") ]; then
      return $TRUE
    else
      _it_std_consoleMessage "ERROR" "$1 est introuvable (ou pas installé)"
      return $FALSE
    fi
  fi
  return $FALSE
}

#-------------------------------------------------------------------------------
# Crée un backup d'un fichier...
# (notamment avant la modification des confs)
#-------------------------------------------------------------------------------
function _it_std_backup {
  local FILE="$1"
  # On vérifie que c'est bien un fichier
  if [ ! -f "$FILE" ]; then
    _it_std_consoleMessage "ERREUR" "« $FILE » n'est pas un fichier"
    return $FALSE
  fi
  
  #
  DIRNAME=$(which dirname)
  BASENAME=$(which basename)
  
  # Chemin absolu du fichier
  local ABS_FILE=$(readlink -f "$FILE")
  
  # Quel est le répertoire de ce fichier ?
  # local FILE_DIR=$(DIRNAME "$FILE")
  
  # Quel est le nom de ce fichier ?
  # local FILE_NAME=$(BASENAME "$FILE")
  # local FILE_NAME_WITHOUT_EXTENSION="${FILE_NAME%.*}"
  
  # Création du nom de backup en fonction de la date du jour
  # local TIMESTAMP=$(date +%Y-%m-%d@%H-%M-%S)
  # local NEW_FILE_NAME="$FILE_DIR/$FILE_NAME_WITHOUT_EXTENSION.inist.$TIMESTAMP"
  local NEW_FILE_NAME="${ABS_FILE}_inist-tools-backup"
  
  # Copie + vérification
  if cp "$FILE" "$NEW_FILE_NAME" ; then
    _it_std_consoleMessage "INFO" "Le fichier « $FILE » a été backupé vers « $NEW_FILE_NAME »."
    return $TRUE
  else
    _it_std_consoleMessage "ERREUR" "Le backup de « $FILE » vers « $NEW_FILE_NAME » n'a pas fonctionné."
    return $FALSE
  fi
}

#-------------------------------------------------------------------------------
# Restaure un fichier backupé avec la fonction « _it_std_backup »
# (recherche automatiquement dans l'arborescence indiquée en argument
# un fichier de backup et le restaure)
#-------------------------------------------------------------------------------
function _it_std_restore {

  WHERETOFIND="$1"
  if [ ! -d "$WHERETOFIND" ]; then
    _it_std_consoleMessage "ERROR" "« $WHERETOFIND » n'est pas un répertoire"
    return $FALSE
  fi

  # Recherche du fichier de backup
  BACKUPFILE=$(find "$WHERETOFIND" -type f -name "*_inist-tools-backup")
  
  if [ ! -z "$BACKUPFILE" ]; then
    RESTOREDFILE=$(echo "$BACKUPFILE" | sed -e 's/_inist-tools-backup//g')
    if mv "$BACKUPFILE" "$RESTOREDFILE" ; then
      _it_std_consoleMessage "INFO" "Fichier « $RESTOREDFILE » restauré."
      return $TRUE;
    else
      _it_std_consoleMessage "ERROR" "Impossible de restaurer « $RESTOREDFILE »."
      return $TRUE;
    fi
  else
    _it_std_consoleMessage "WARNING" "Aucun fichier de backup trouvé dans « $WHERETOFIND »."
    return $FALSE
  fi
  
}

function _it_std_removeConf {
  FILE="$1"
  if [ ! -f "$FILE" ]; then
    _it_std_consoleMessage "ERROR" "« $FILE » n'existe pas ou n'est pas un fichier"
    return $FALSE
  fi
  # Suppression des éléments de configuration propre à "inist-tools" du fichier
  if [ grep -v "# inist-tools" "$FILE" > "/run/shm/$$" ] && [ mv "/run/shm/$$" > "$FILE" ]; then
    return $TRUE
  else
    return $FALSE
  fi
}

function _it_std_switchProxy {
  #--------------------------------------------------
  # On teste si le contexte demandé est le proxy ADSL
  # dans ce cas on bascule
  #--------------------------------------------------
  IT_PROXY=$(_it_std_getEnv "it_proxy")
  if [ $IT_PROXY == -1 ]; then
    _it_std_setEnv "it_proxy" "INIST"
    IT_PROXY="INIST"
  fi

  case $IT_PROXY in

    ADSL )
      INIST_HTTP_PROXY="$INIST_HTTP_ADSL_PROXY"
      INIST_HTTPS_PROXY="$INIST_HTTPS_ADSL_PROXY"
      INIST_FTP_PROXY="$INIST_FTP_ADSL_PROXY"
      INIST_PROXYPAC="$INIST_ADSL_PROXYPAC"
      INIST_NO_PROXY="localhost,127.0.0.0/8,*.local,172.16.0.0/16"
      INIST_PROXY_ADDRESS="$INIST_ADSL_PROXY_ADDRESS"
      INIST_PROXY_PORT="$INIST_ADSL_PROXY_PORT"
    ;;

    INIST )
      INIST_HTTP_PROXY="http://proxyout.inist.fr:8080"
      INIST_HTTPS_PROXY="http://proxyout.inist.fr:8080"
      INIST_FTP_PROXY="http://proxyout.inist.fr:8080"
      INIST_PROXYPAC="http://proxypac.intra.inist.fr/proxy.pac"
      INIST_NO_PROXY="localhost,127.0.0.0/8,*.local,172.16.0.0/16"
      INIST_PROXY_ADDRESS="http://proxyout.inist.fr"
      INIST_PROXY_PORT="8080"
    ;;

  esac
}

#-------------------------------------------------------------------------------
# Positionne le proxy (INIST/ADSL) en fonction de la dernière configuration 
# choisie
#-------------------------------------------------------------------------------
_it_std_switchProxy
